#!/usr/bin/env python

import sys
import rospy
import numpy as np
import cv2
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image
from std_msgs.msg import Float64
from std_msgs.msg import Bool

#low_red = np.array([160, 100, 100])
#high_red = np.array([179, 255, 255])

low_red = np.array([0, 100, 100])
high_red = np.array([10, 255, 255])

class BallDetector:
    def __init__(self):
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/mybot/camera1/image_raw", Image, self.image_callback)
        self.delta_angle_pub = rospy.Publisher('/mybot/delta_angle', Float64, queue_size=1)
        self.see_red_pub = rospy.Publisher('/mybot/see_red', Bool, queue_size=1)
    
    def find_red_circle(self, bgr):
        try:
            bgr = cv2.GaussianBlur(bgr, (5, 5), 0)
            hsv = cv2.cvtColor(bgr, cv2.COLOR_BGR2HSV)
            mask = cv2.inRange(hsv, low_red, high_red)
            red = cv2.bitwise_and(hsv, hsv, mask=mask)
            h, s, v = cv2.split(red)
            circles = cv2.HoughCircles(v, cv2.HOUGH_GRADIENT, 2, 50, param1=50, param2=40, minRadius=10,maxRadius=200)
            if circles is not None:
                circle = circles[0][0]
                cv2.circle(bgr, (circle[0], circle[1]), circle[2], (255, 0, 0), 2)
                cv2.imshow("result: ", bgr)
                cv2.waitKey(1)
                return circle
        except CvBridgeError as e:
            print(e)
            return None

    def image_callback(self, data):
        bgr = self.bridge.imgmsg_to_cv2(data, "bgr8")
        h, w = bgr.shape[:2]
        circle = self.find_red_circle(bgr)
        delta_angle = w / 2 - circle[0] if circle is not None else 0
        see_red = True if circle is not None else False
        self.delta_angle_pub.publish(delta_angle)
        self.see_red_pub.publish(see_red)

def main(args):
    rospy.init_node('ball_detector', anonymous=True)
    try:
        ball_detector = BallDetector()
        rospy.spin()
    except KeyboardInterrupt:
        print("Ball Detector Shutting down")
    cv2.destroyAllWindows()

if __name__ == '__main__':
    print cv2.__version__
    main(sys.argv)
